// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  image         String?
  role          String @default("user")
  password      String?
  accounts      Account[]
  sessions      Session[]
  quizResults   QuizResult[]
  totalScore    Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isActive      Boolean     @default(true)  // ID admin yang membuat akun

  @@map("users")
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  description String?
  category    String
  difficulty  String    // easy, medium, hard
  timeLimit   Int       // dalam detik
  questions   Question[]
  quizResults QuizResult[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)   // ID admin yang membuat quiz
}

// Model untuk Pertanyaan
model Question {
  id          String    @id @default(cuid())
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question    String
  options     Option[]
  explanation String    // Penjelasan untuk jawaban yang benar
  score       Int       // Nilai untuk jawaban yang benar
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
}

// Model untuk Pilihan Jawaban
model Option {
  id          String    @id @default(cuid())
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text        String
  isCorrect   Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model untuk Hasil Quiz
model QuizResult {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score       Int
  timeSpent   Int       // dalam detik
  completed   Boolean   @default(false)
  answers     Answer[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model untuk Jawaban User
model Answer {
  id           String     @id @default(cuid())
  quizResultId String
  quizResult   QuizResult @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  questionId   String
  optionId     String
  isCorrect    Boolean
  createdAt    DateTime   @default(now())
}

 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}